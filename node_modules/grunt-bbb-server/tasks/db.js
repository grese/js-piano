var Schema,ObjectId,SongSchema,Song;
var encoder = require('./encoder');

exports.setup = function(dbhost, dbname){
    var mongoose = require('mongoose');
    mongoose.connect('mongodb://'+dbhost+'/'+dbname, function(){
        console.log('connected to mongodb://'+dbhost+'/'+dbname);
    });

    Schema = mongoose.Schema,
    ObjectId = Schema.ObjectId,
    SongSchema = new Schema({
            _id         : String,
            name        : { type: String, default: 'Untitled' },
            instrument  : { type: String, default: 'piano' },
            events      : Array,
            duration    : { type: Number, default: 0 },
            date        : { type: Date, default: Date.now },
            filename    : String
    }),
    Song = mongoose.model('Song', SongSchema);

    // If the Node process ends, close the Mongoose connection
    process.on('SIGINT', function() {
        mongoose.connection.close(function () {
            console.log('Mongoose default connection disconnected through app termination');
            process.exit(0);
        });
    });
};

exports.findSongs = function(query, res){
    Song.find({}, function(err, songs){
        if(err) res.status(500).send();
        res.send(songs);
    });
};
exports.findSongById = function(id, res){
    Song.findById(id, function(err, song){
        if(err) res.status(500).send();
        res.send(song);
    });
};
exports.saveSong = function(song, res){
    var id = song.id ? song.id : createIdFromName(song.name),
        errs = [];
    if(!id) return res.send({errors: ['song must have a name']});

    Song.findOne({_id: id}, function (err, foundSong) {
        if(err){
            console.log(err);
            return res.send({errors: errs});
        }

        if(!foundSong){
            var newSong = new Song({
                _id: id,
                name: song.name,
                events: song.events,
                duration: song.duration,
                date: song.date
            });
            newSong.save(function(err, saveResult){
                if(err){
                    return res.send(err);
                }else{
                    res.send({song: saveResult});
                }
            });
        }else{
            res.send({errors: ['song already exists with that name - song names must be unique']});
        }
    });
};



var createIdFromName = function(name){
    var id = name.replace(/[^a-zA-Z ]/g, "");
    return id.toLowerCase().replace(/\s/g, '-');
};
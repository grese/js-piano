var cwd = process.cwd(),
    soundMaps = {
        piano: require(cwd+"/app/audio/piano/output.json")
    };

exports.encodeSong = function(song, id){
    var format = "mp3",
        ffmpegCmdInput = "",
        ffmpegCmd = "",
        blankFile = cwd+"/app/audio/blank."+format,
        numFiles = 0,
        ffmpegCmdFilter = "-filter_complex '",
        outputFile = cwd+"/app/audio/songs/"+id+"."+format;
    song.events.forEach(function(event, idx){
        var soundFile = cwd+"/app/audio/"+ event.instrument +"/"+event.sound + "."+format,
            soundTime = event.time / 100, // ms to sec...
            soundMap = soundMaps[event.instrument].spritemap,
            soundInfo = soundMap[event.sound],
            soundLen = soundInfo.end - soundInfo.start,
            soundEnd = soundTime + soundLen,
            soundTrim = 0,
            whiteSpace = 0,
            soundInput = "";

        if(song.events.length > idx + 1){
            var nextEvent = song.events[idx + 1],
                nextEventTime = nextEvent.time / 100; // ms to sec...
            if(soundEnd < nextEventTime){
                // Sound would finish before next event, so we may need some padding...
                whiteSpace = (nextEventTime - soundEnd) / 10;
            }else if(soundEnd > nextEventTime){
                // Next event will start before sound would finish, so we need to trim sound...
                soundTrim = soundEnd - nextEventTime;
            }
        }

        if(soundTrim > 0) soundInput += "-ss "+ formatTime(0) + " -t "+ formatTime(soundLen - soundTrim)+" ";

        soundInput += "-i "+soundFile;
        ffmpegCmdFilter += "["+numFiles+":a]";
        numFiles++;

        if(whiteSpace > 0){
            soundInput += " -ss "+formatTime(0) + " -t "+formatTime(whiteSpace) + " -i " + blankFile;
            ffmpegCmdFilter += "["+numFiles+":a]";
            numFiles++;
        }

        ffmpegCmdInput += " " + soundInput + " ";
    });
    ffmpegCmdFilter += " concat=n="+numFiles+":v=0:a=1' "+outputFile;
    ffmpegCmd = "ffmpeg"+ffmpegCmdInput+ffmpegCmdFilter+" -y";
    runCommand(ffmpegCmd);
};

function runCommand(command){
    var terminal = require("child_process").exec;
    terminal(command, function(error, stdout, stderr){
        if(!error){
            return console.log("Encoding Complete", stdout);
        }else{
            return console.log("<ERROR>: While encoding song... ", error);
        }
    });
}

// Takes time in seconds and converts it to 00:00:00.000
function formatTime(sec){
    var hours   = Math.floor(sec / 3600),
        minutes = Math.floor((sec - (hours * 3600)) / 60),
        seconds = sec - (hours * 3600) - (minutes * 60);

    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+(seconds.toFixed(3));}

    return hours+":"+minutes+":"+seconds;
}
{
  "name": "es6-module-transpiler",
  "version": "0.6.2",
  "description": "es6-module-transpiler is an experimental compiler that allows you to write your JavaScript using a subset of the current ES6 module syntax, and compile it into various formats.",
  "homepage": "http://square.github.com/es6-module-transpiler",
  "keywords": [
    "es6",
    "module",
    "transpile",
    "amd",
    "commonjs"
  ],
  "bugs": {
    "url": "https://github.com/square/es6-module-transpiler/issues"
  },
  "bin": {
    "compile-modules": "./bin/compile-modules"
  },
  "files": [
    "bin",
    "lib",
    "LICENSE",
    "README.md"
  ],
  "directories": {
    "lib": "./lib",
    "test": "test"
  },
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/square/es6-module-transpiler.git"
  },
  "scripts": {
    "test": "npm run test-bundle && npm run test-commonjs && npm run test-unit",
    "test-bundle": "node test/runner.js -f bundle",
    "test-commonjs": "node test/runner.js -f commonjs",
    "test-unit": "mocha -R spec test/unit"
  },
  "author": {
    "name": "Square, Inc."
  },
  "license": "Apache 2",
  "dependencies": {
    "ast-util": "^0.1.2",
    "esprima": "git://github.com/esnext/esprima#harmony-esnext",
    "mkdirp": "^0.5.0",
    "posix-getopt": "^1.0.0",
    "recast": "^0.6.6"
  },
  "devDependencies": {
    "example-runner": "^0.1.0",
    "mocha": "^1.20.1"
  },
  "readme": "# ES6 Module Transpiler [![Build Status](https://travis-ci.org/square/es6-module-transpiler.png)](https://travis-ci.org/square/es6-module-transpiler)\n\nES6 Module Transpiler is an experimental compiler that allows you to write your\nJavaScript using a subset of the current ES6 module syntax, and compile it into\nAMD or CommonJS modules.\n\n**WARNING: The ES6 module syntax is still undergoing a lot of churn, and will\nlikely change before final approval.**\n\n**ES6 Module Transpiler will track ES6 syntax, and not attempt to maintain\nbackwards compatibility with syntax that ultimately did not succeed as part of\nES6.**\n\nThis compiler provides a way to experiment with ES6 syntax in real world\nscenarios to see how the syntax holds up. It also provides a nicer, more\ndeclarative way to write AMD (or CommonJS) modules.\n\nSee the [CHANGELOG](./CHANGELOG.md) for the latest updates.\n\n## Usage\n\n### Build tools\n\nThe easiest way to use the transpiler is from an existing build tool. There\nseveral plugins developed for different build tools:\n\n* **Grunt:** [grunt-es6-module-transpiler](https://github.com/joefiorini/grunt-es6-module-transpiler), maintained by @joefiorini (not yet compatible with v0.5.x)\n* **Gulp:** [gulp-es6-module-transpiler](https://github.com/ryanseddon/gulp-es6-module-transpiler), maintained by @ryanseddon (not yet compatible with v0.5.x)\n* **Brunch:** [es6-module-transpiler-brunch](https://github.com/gcollazo/es6-module-transpiler-brunch), maintained by @gcollazo *(CommonJS only)* (not yet compatible with v0.5.x)\n* **Broccoli:** [broccoli-es6-concatenator](https://github.com/joliss/broccoli-es6-concatenator), maintained by @joliss (not yet compatible with v0.5.x)\n* **Mimosa:** [mimosa-es6-module-transpiler](https://github.com/dbashford/mimosa-es6-module-transpiler), maintained by @dbashford (not yet compatible with v0.5.x)\n* **AMD Formatter:** [es6-module-transpiler-amd-formatter](https://github.com/caridy/es6-module-transpiler-amd-formatter), maintained by @caridy (compatible with v0.5.x+ only)\n\n### Executable\n\nThe transpiler can be used directly from the command line:\n\n```\n$ npm install -g es6-module-transpiler\n$ compile-modules convert < foo.js\n```\n\nHere is the basic usage:\n\n```\ncompile-modules convert -I lib -o out FILE [FILEâ€¦]\n```\n\n### Library\n\nYou can also use the transpiler as a library:\n\n```javascript\nvar transpiler = require('es6-module-transpiler');\nvar Container = transpiler.Container;\nvar FileResolver = transpiler.FileResolver;\nvar BundleFormatter = transpiler.formatters.bundle;\n\nvar container = new Container({\n  resolvers: [new FileResolver(['lib/'])],\n  formatter: new BundleFormatter()\n});\n\ncontainer.getModule('index');\ncontainer.write('out/mylib.js');\n```\n\n## Supported ES6 Module Syntax\n\nAgain, this syntax is in flux and is closely tracking the module work being\ndone by TC39.\n\n### Named Exports\n\nThere are two types of exports. *Named exports* like the following:\n\n```javascript\n// foobar.js\nvar foo = 'foo', bar = 'bar';\n\nexport { foo, bar };\n```\n\nThis module has two named exports, `foo` and `bar`.\n\nYou can also write this form as:\n\n```javascript\n// foobar.js\nexport var foo = 'foo';\nexport var bar = 'bar';\n```\n\nEither way, another module can then import your exports like so:\n\n```js\nimport { foo, bar } from 'foobar';\n\nconsole.log(foo);  // 'foo'\n```\n\n### Default Exports\n\nYou can also export a *default* export. For example, an ES6ified jQuery might\nlook like this:\n\n```javascript\n// jquery.js\nvar jQuery = function() {};\n\njQuery.prototype = {\n  // ...\n};\n\nexport default jQuery;\n```\n\nThen, an app that uses jQuery could import it with:\n\n```javascript\nimport $ from 'jquery';\n```\n\nThe default export of the \"jquery\" module is now aliased to `$`.\n\nA default export makes the most sense as a module's \"main\" export, like the\n`jQuery` object in jQuery. You can use default and named exports in parallel.\n\n### Other Syntax\n\n#### `module`\n\nWhereas the `import` keyword imports specific identifiers from a module,\nthe `module` keyword creates an object that contains all of a module's\nexports:\n\n```js\nmodule foobar from \"foobar\";\nconsole.log(foobar.foo);  // \"foo\"\n```\n\nIn ES6, this created object is *read-only*, so don't treat it like a mutable\nnamespace! **NOTE:** This syntax especially may be removed or modified before\nES6 is finalized!\n\n#### `import \"foo\";`\n\nA \"bare import\" that doesn't import any identifiers is useful for executing\nside effects in a module. For example:\n\n```js\n// alerter.js\nalert(\"alert! alert!\");\n\n// alertee.js\nimport \"alerter\";  // will pop up alert box\n```\n\n## Compiled Output\n\n### Default Exports\n\nThis is super important:\n\n**Default exports bind to an identifier on the module called `default`!**\n\nInternally, the transpiler will use this default identifer when importing, but\nany outside consumer needs to be aware that it should use the `default` key and\nnot the module itself. For example, a CommonJS consumer should look like this:\n\n```js\nvar $ = require('jquery')['default'];\n```\n\n## Installation\n\nAdd this project to your application's package.json by running this:\n\n    $ npm install --save es6-module-transpiler\n\nOr install it globally:\n\n    $ npm install -g es6-module-transpiler\n\n## Acknowledgements\n\nThanks to [Yehuda Katz](https://twitter.com/wycats) for\n[js_module_transpiler](https://github.com/wycats/js_module_transpiler), the\nlibrary on which this one is based. Thanks to [Dave\nHerman](https://twitter.com/littlecalculist) for his work on ES6 modules.\nThanks to [Erik Bryn](https://twitter.com/ebryn) for providing the initial push\nto write this library. Thanks to [Domenic\nDenicola](https://twitter.com/domenic) & [Thomas\nBoyt](https://twitter.com/thomasaboyt) for their efforts to make this project\neven better. And finally thanks to the JavaScript community at Square for\nhelping to write and release this library.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\nAny contributors to the master es6-module-transpiler repository must sign the\n[Individual Contributor License Agreement (CLA)][cla].  It's a short form that\ncovers our bases and makes sure you're eligible to contribute.\n\n[cla]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1\n\nWhen you have a change you'd like to see in the master repository, [send a pull\nrequest](https://github.com/square/es6-module-transpiler/pulls). Before we merge\nyour request, we'll make sure you're in the list of people who have signed a\nCLA.\n\nThanks, and enjoy living in the ES6 future!\n",
  "readmeFilename": "README.md",
  "_id": "es6-module-transpiler@0.6.2",
  "dist": {
    "shasum": "d4e91f43cfeedbeea30e4a36c633b273772701b4"
  },
  "_from": "es6-module-transpiler@~0.6.0",
  "_resolved": "https://registry.npmjs.org/es6-module-transpiler/-/es6-module-transpiler-0.6.2.tgz"
}
